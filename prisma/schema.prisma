datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Asegúrate de configurar esta variable en .env
}

generator client {
  provider = "prisma-client-js"
}
enum Rol {
  ADMIN
  PROFESOR
  REPRESENTANTE
  ESTUDIANTE //pendiente 
}



model Usuarios {
  id              Int      @id @default(autoincrement())
  cedula          String   @unique
  correo          String   @unique
  password        String
  rol             Rol   // Puede ser enum en el futuro
  sesionIniciada  Boolean  @default(false)
  
  profesorId      Int?
  isDeleted      Boolean @default(false)
  resetCode   String? 
  notificaciones  Notificacion[]
  profesores Profesor[]
  

  Representantes Representantes[]
}

model Representantes {
  id                     Int          @id @default(autoincrement())
  nombre                 String
  apellido               String
  cedula                 String       @unique
  nacionalidad           String?
  ciudad                 String?
  correo                 String?
  direccion_Domicilio     String?
  foto                   String?
  numeroCelular1         String
  numeroCelular2         String?
  numeroCelular3         String?
  genero                 String
  cantidadRepresentados  Int          @default(0)
  personasNoAutorizadas  String?
  estudiantes            Estudiantes[]
  usuario               Usuarios?     @relation(fields: [usuarioId], references: [id])
  usuarioId             Int?
}

model Estudiantes {
  id                     Int          @id @default(autoincrement())
  nombre                 String
  cedula                 String       @unique
  genero                 String
  nacionalidad           String?
  fechaNacimiento        DateTime
  curso                  String
  edad                   Int
  problemasDiscapacidad  Boolean      @default(false)
  problemasSalud         String?
  tipoSangre             String?
  representanteId        Int?
  representante          Representantes? @relation(fields: [representanteId], references: [id])
  rendimiento            Rendimientos[]

  EstudianteAnio EstudianteAnio[]

  HistorialAcademico HistorialAcademico[]
  asistencias Asistencia[] 
}

model Profesor {
  id        Int         @id @default(autoincrement())
  nombre    String
  cedula    String      @unique
  actividades Actividad[]
  cursos   Curso[]
  Usuario   Usuarios   @relation(fields: [id], references: [id])
  Materias Materias[]
  novedades Novedades[]  
  asistencias Asistencia[] 
}

model Novedades{
  id        Int       @id @default(autoincrement())
  tipo_novedade    String
  fecha            DateTime
  profesorId        Int
  descricion       String
   profesor    Profesor   @relation(fields: [profesorId], references: [id])


} 

model Curso {
  id           Int        @id @default(autoincrement())
  nombreCurso  String
  descripcion String
  duracion  Int 
  profesorId Int
  actividades  Actividad[]
 profesor    Profesor  @relation(fields: [profesorId], references: [id])
 asistencias Asistencia[] 

 
}

model Materias {
  id           Int        @id @default(autoincrement())
  nombreMateria String
  profesorId Int
  profesor   Profesor  @relation(fields: [profesorId], references: [id])
  actividades  Actividad[]
  asistencias Asistencia[] 
}

model Asistencia{
id  Int @id @default(autoincrement())
  profesorId   Int
  cursoId      Int
  materiaId    Int
  estudianteId Int
   fecha        DateTime     @default(now()) // Fecha de registro de la asistencia
  estado       String       // Ejemplo: "Presente", "Ausente", "Justificado"
   profesor     Profesor  @relation(fields: [profesorId], references: [id])
  curso        Curso     @relation(fields: [cursoId], references: [id])
  materia      Materias  @relation(fields: [materiaId], references: [id])
  estudiante   Estudiantes @relation(fields: [estudianteId], references: [id])
  
  }

model Actividad {
  id           Int         @id @default(autoincrement())
  nombre       String
  descripcion  String
  fecha        DateTime
  foto         String
  materiaId    Int
  cursoId      Int
  profesorId   Int?
  materia      Materias     @relation(fields: [materiaId], references: [id])
  curso        Curso      @relation(fields: [cursoId], references: [id])
  profesor     Profesor?   @relation(fields: [profesorId], references: [id])
}

model Rendimientos {
  id           Int         @id @default(autoincrement())
  estudianteId Int
  tarea        String
  estado       String
  observaciones String?
  estudiante   Estudiantes  @relation(fields: [estudianteId], references: [id])
}

model Notificacion {
  id         Int     @id @default(autoincrement())
  usuarioId  Int
  mensaje    String
  fecha      DateTime
  tipo        String 
  usuario    Usuarios @relation(fields: [usuarioId], references: [id])
}
model AnioLectivo {
  id               Int             @id @default(autoincrement())
  nombre           String          // Ejemplo: "2023-2024"
  fechaInicio      DateTime
  fechaFin         DateTime
  estudiantes      EstudianteAnio[] // Relación con estudiantes en este año lectivo
  isActive         Boolean         @default(false) // Indica si es el año lectivo actual

  HistorialAcademico HistorialAcademico[]
}

model EstudianteAnio {
  id               Int             @id @default(autoincrement())
  estudianteId     Int
  anioLectivoId    Int
  curso            String          // Curso asignado al estudiante durante este año lectivo
  promedio         Float?          // Promedio del estudiante en el año
  estado           String          // Ejemplo: "Aprobado", "Reprobado"
  estudiante       Estudiantes     @relation(fields: [estudianteId], references: [id])
  anioLectivo      AnioLectivo     @relation(fields: [anioLectivoId], references: [id])
}
model HistorialAcademico {
  id             Int             @id @default(autoincrement())
  estudianteId   Int
  anioLectivoId  Int
  curso          String          // Ejemplo: "Quinto Grado"
  estado         String          // Ejemplo: "Aprobado", "Reprobado"
  promedio       Float?          // Promedio final del estudiante en el curso
  fechaRegistro  DateTime        @default(now()) // Fecha en que se registró el resultado
  observaciones  String?         // Notas adicionales sobre el desempeño del estudiante

  estudiante     Estudiantes     @relation(fields: [estudianteId], references: [id])
  anioLectivo    AnioLectivo     @relation(fields: [anioLectivoId], references: [id])
}
